% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/2_visualization.r
\name{assign_cobs_layer_ls}
\alias{assign_cobs_layer_ls}
\title{Append corrupted observations and extract SHAP layer list.}
\usage{
assign_cobs_layer_ls(
  data,
  class,
  y,
  target_level = 1,
  n_cobs = 2,
  var_coeff = 0.1,
  verbose = TRUE,
  noisy = TRUE
)
}
\arguments{
\item{data}{A data.frame or matrix with data from all \code{class} levels, not just
the level sampled from.}

\item{class}{The variable to group points by. Originally the \emph{predicted}
class.}

\item{y}{The target variable of the model.}

\item{target_level}{The number of the level of \code{class} (cast as.factor) to
sample from.}

\item{n_cobs}{The number of Corrupted OBServations (cobs) to draw for \emph{each}
other non-target level.}

\item{var_coeff}{Variance coefficient, closer to 0 make points near the
median, above 1 makes more points further away from the median.
Defaults to 1.}

\item{verbose}{Logical, Whether or not the function should print tictoc time
info. Defaults to TRUE.}

\item{noisy}{Logical, Whether of not the function should play a beeper tone
upon completion. Defaults to TRUE.}
}
\value{
A list of data.frames, the return of \code{nested_local_attr_layers()} of the
\code{data} after appending the new corrupted observations.
}
\description{
Draws \code{n_cobs} from the \code{data} of the \code{target_level} for \emph{each} other level of
the \code{class}. This is appended to the \code{data} and finally applied to
\code{nested_local_attr_layers()}.
}
\examples{
## Data setup, palmerpenguins::penguins
raw <- spinifex::penguins
lvls <- levels(raw$species)
## Filter to closest 2 classes
raw <- raw[raw$species \%in\% lvls[1:2], ]
dat <- as.data.frame(spinifex::scale_sd(raw[, 1:4]))
clas <- factor(raw$species, levels = lvls[1:2]) ## Manually remove 3rd lvl

## Apply the functions
layer_ls <- assign_cobs_layer_ls(
  data = dat,
  class = clas,
  y = clas,
  target_level = 1,
  n_cobs = 2,
  var_coeff = .1)

## Structure of the list.
names(layer_ls)
str(layer_ls$plot_df)
str(layer_ls$decode_df)
}
