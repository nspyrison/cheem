% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/2_visualization.r
\name{proto_basis1d_distribution}
\alias{proto_basis1d_distribution}
\title{Adds the distribution of the row local attributions to a ggtour}
\usage{
proto_basis1d_distribution(
  cheem_ls,
  group_by = as.factor(FALSE),
  position = c("top1d", "floor1d", "top2d", "floor2d", "off"),
  shape = c(142, 124),
  do_add_pcp_segments = TRUE,
  primary_obs = NULL,
  comparison_obs = NULL,
  inc_vars = TRUE
)
}
\arguments{
\item{cheem_ls}{A return from \code{cheem_ls()}, a list of data frames.}

\item{group_by}{Vector to group densities by. Originally \emph{predicted} class.}

\item{position}{The position for the basis, one of: c("top1d", "floor1d",
"top2d", "floor2d", "off").
Defaults to "top1d"; basis above the density curves.}

\item{shape}{Number specifying the shape of the basis distribution points.
Typically 142 or 124 indicating '|' for \code{plotly} and \code{gganimate} respectively.
Defaults to 142, '|' for \code{plotly}.}

\item{do_add_pcp_segments}{Logical, whether or not to add to add faint
parallel coordinate lines on the 1D basis. Defaults to TRUE.}

\item{primary_obs}{The rownumber of the primary observation. Its local
attribution becomes the 1d projection basis, and the point it highlighted
as a dashed line.}

\item{comparison_obs}{The rownumber of the comparison observation. Point
is highlighted as a dotted line.}
}
\description{
Adds the distribution of orthonormalized row values of
the specified local explanation \code{attr_df}. Does not draw the basis itself;
use in conjunction with \code{proto_basis1d()}.
}
\examples{
library(cheem)
set.dir(~)
.cheem_ls <- readRDS(here::here("inst/shiny_apps/cheem_initial/data//1preprocess_penguins.rds"))
dat <- .cheem_ls$decode_df[, 8:11]
clas <- .cheem_ls$decode_df$class
attr_df <- .cheem_ls$attr_df[1:nrow(dat), -5]
bas <- basis_local_attribution(attr_df, nrow(dat))
mv <- manip_var_of(bas) ## Warning is fine.

## 1D case:
mt_path <- manual_tour(bas, mv)

ggt <- ggtour(mt_path, dat) +
  proto_density(aes_args = list(color = clas, fill = clas)) +
  proto_basis1d() +
  proto_basis1d_distribution(attr_df, group_by = clas)
\dontrun{
animate_plotly(ggt)
}
}
\concept{ggtour proto}
